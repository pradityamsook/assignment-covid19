{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","handleSearch","text","data","state","dataCovid","arr","filter","val","Country","includes","push","setState","searchByCountry","isLoaded","sort","newDataList","this","a","b","TotalConfirmed","axios","get","then","res","Countries","catch","err","console","error","className","length","type","placeholder","onChange","e","target","value","map","covid","TotalDeaths","TotalRecovered","ID","style","textAlign","colSpan","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTAwJeA,E,kDA/Ib,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAeRC,aAAe,SAACC,GACd,IAAMC,EAAO,EAAKC,MAAMC,UAEpBC,EAAM,GACVH,EAAKI,QAAO,SAACC,GACPA,EAAIC,QAAQC,SAASR,IACvBI,EAAIK,KAAKH,MAIA,KAATN,EACF,EAAKU,SAAS,CACZP,UAAW,EAAKD,MAAMS,kBAGxB,EAAKD,SAAS,CACZP,UAAWC,KA9Bf,EAAKF,MAAQ,CACXC,UAAW,GACXS,UAAU,EACVC,KAAM,OACNF,gBAAiB,IANF,E,wDAqCnB,WACE,IACIG,EADaC,KAAKb,MAEE,SAApBa,KAAKb,MAAMW,KACbC,EAAYX,UAAUU,MAAK,SAACG,EAAGC,GAAJ,OAAUD,EAAEE,eAAiBD,EAAEC,kBAE1DJ,EAAYX,UAAUU,MAAK,SAACG,EAAGC,GAAJ,OAAUD,EAAEE,eAAiBD,EAAEC,kBAG5DH,KAAKL,SAAS,CACZP,UAAWW,EAAYD,MACrB,SAACG,EAAGC,GAAJ,OAAUD,EAAEE,eAAiBD,EAAEC,sB,+BAKrC,WAAqB,IAAD,OAClBC,IACGC,IAAI,sCACJC,MAAK,SAACC,GACL,EAAKZ,SAAS,CACZE,UAAU,EACVT,UAAWmB,EAAIrB,KAAKsB,UACpBZ,gBAAiBW,EAAIrB,KAAKsB,eAG7BC,OAAM,SAACC,GACNC,QAAQC,MAAMF,Q,oBAIpB,WAAU,IAAD,OACP,EAAiDV,KAAKb,MAA9CC,EAAR,EAAQA,UAAWQ,EAAnB,EAAmBA,gBAMnB,OANA,EAAoCC,SAWlC,sBAAKgB,UAAU,MAAf,UACE,qDACA,kDAAqBjB,EAAgBkB,UACrC,uBACEC,KAAK,OACLC,YAAY,yBACZC,SAAU,SAACC,GAAD,OAAO,EAAKlC,aAAakC,EAAEC,OAAOC,UAG9C,kCACE,gCACE,+BACE,yCACA,iDACA,8CACA,sDAGHhC,EAAU0B,OAAS,EAClB1B,EAAUiC,KAAI,SAACC,GAAD,OACZA,EAAMnB,eAAiB,GACvBmB,EAAMC,YAAc,GACpBD,EAAME,eAAiB,EACrB,+BACE,6BAAKF,EAAM9B,UACX,6BAAK8B,EAAMnB,iBAEX,6BAAKmB,EAAMC,cACX,6BAAKD,EAAME,mBALJF,EAAMG,IAQf,+BACE,6BAAKH,EAAM9B,UACX,6BACG8B,EAAMnB,eAAiB,EACtB,8BAAMmB,EAAMnB,iBACV,OAEN,6BACGmB,EAAMC,YAAc,EACnB,8BAAMD,EAAMC,cACV,OAEN,6BACGD,EAAME,eAAiB,EACtB,8BAAMF,EAAME,iBACV,SAfCF,EAAMG,OAqBnB,6BACE,oBAAIC,MAAO,CAAEC,UAAW,UAAYC,QAAS,EAA7C,wFAzDD,sD,GA7EKC,IAAMC,WCITC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3144555b.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n// import Covid19 from \"./Covid19\";\n\n// import css\nimport \"./App.css\";\nimport \"./table.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataCovid: [],\n      isLoaded: false,\n      sort: \"desc\",\n      searchByCountry: [],\n    };\n  }\n\n  // async getDataCovid19 () {\n  //   const res = await axios.get(\"https://api.covid19api.com/summary\");\n  //   const data = await res.json();\n  //   return data.results;\n  // }\n\n  handleSearch = (text) => {\n    const data = this.state.dataCovid;\n\n    let arr = [];\n    data.filter((val) => {\n      if (val.Country.includes(text)) {\n        arr.push(val);\n      }\n    });\n\n    if (text === \"\") {\n      this.setState({\n        dataCovid: this.state.searchByCountry,\n      });\n    } else {\n      this.setState({\n        dataCovid: arr,\n      });\n    }\n  };\n\n  sortByTotalConfirmed() {\n    const dataList = this.state;\n    let newDataList = dataList;\n    if (this.state.sort === \"desc\") {\n      newDataList.dataCovid.sort((a, b) => a.TotalConfirmed > b.TotalConfirmed);\n    } else {\n      newDataList.dataCovid.sort((a, b) => a.TotalConfirmed < b.TotalConfirmed);\n    }\n\n    this.setState({\n      dataCovid: newDataList.sort(\n        (a, b) => a.TotalConfirmed > b.TotalConfirmed\n      ),\n    });\n  }\n\n  componentDidMount() {\n    axios\n      .get(\"https://api.covid19api.com/summary\")\n      .then((res) => {\n        this.setState({\n          isLoaded: true,\n          dataCovid: res.data.Countries,\n          searchByCountry: res.data.Countries,\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }\n\n  render() {\n    const { dataCovid, searchByCountry, isLoaded } = this.state; //extracter\n    // const sorting = dataCovid.sort((first, second) => {\n    //   const isSorted = (sortType === 'desc') ? 1 : -1;\n    //   return isSorted * first.dataCovid.dataCovid.TotalConfirmed.localCompare(second.dataCovid.dataCovid.TotalConfirmed);\n    // });\n\n    if (!isLoaded) {\n      return <div>waiting data...</div>;\n    }\n\n    return (\n      <div className=\"App\">\n        <header>Report COVID-19</header>\n        <div>Total country: {searchByCountry.length}</div>\n        <input\n          type=\"text\"\n          placeholder=\"Search country name...\"\n          onChange={(e) => this.handleSearch(e.target.value)}\n        />\n        {}\n        <table>\n          <thead>\n            <tr>\n              <th>Country</th>\n              <th>Total confirmed</th>\n              <th>Total deaths</th>\n              <th>Total recovered</th>\n            </tr>\n          </thead>\n          {dataCovid.length > 0 ? (\n            dataCovid.map((covid) =>\n              covid.TotalConfirmed > 0 ||\n              covid.TotalDeaths > 0 ||\n              covid.TotalRecovered > 0 ? (\n                <tr key={covid.ID}>\n                  <td>{covid.Country}</td>\n                  <td>{covid.TotalConfirmed}</td>\n                  {/* <td>{covid.NewDeaths > 0 ? <div style={{background: \"#FF5835\"}}>{covid.NewDeaths}</div>: 'No update'}</td> */}\n                  <td>{covid.TotalDeaths}</td>\n                  <td>{covid.TotalRecovered}</td>\n                </tr>\n              ) : (\n                <tr key={covid.ID}>\n                  <td>{covid.Country}</td>\n                  <td>\n                    {covid.TotalConfirmed > 0 ? (\n                      <div>{covid.TotalConfirmed}</div>\n                    ) : null}\n                  </td>\n                  <td>\n                    {covid.TotalDeaths > 0 ? (\n                      <div>{covid.TotalDeaths}</div>\n                    ) : null}\n                  </td>\n                  <td>\n                    {covid.TotalRecovered > 0 ? (\n                      <div>{covid.TotalRecovered}</div>\n                    ) : null}\n                  </td>\n                </tr>\n              )\n            )\n          ) : (\n            <tr>\n              <td style={{ textAlign: \"center\" }} colSpan={4}>\n                ไม่พบข้อมูล\n              </td>\n            </tr>\n          )}\n        </table>\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}